
To run my code, 
>>> python moc.py keff 
will run MOC and show the k values plotted over the different iterations.

>>> python moc.py diagram
will plot the rays in the diagram with the nice rays included. 


We're currently set at 300 cm dist for the rays, and using 100 rays per 
iteration. If you want to change that, the variables to do so are living around 
line 15



Here's a bit of a layout of the code.
 
* Initialize Geometry and Materials. This is done around line 330, where we 
  specify radii and sidelengths, and create our moderator and fuel materials. 
  Note that the actual multigroup data for the materials is defined in the file
  materials.py. 

* I also create a vector of all the x and y planes, which are 
  created using classes in geometry.py. Note that the left-most and right-most
  xPlanes are reflective, as are the top-most and bottom-most yPlanes.

* Similarly, the pincells are created and stored in a vector called ``cells''

* Near the bottom, under ``Actually running MOC'', we give a k guess, and 
  instantiate sim, which is of class simulation. This just tracks the phi and 
  q and k that correspond with your current iteration. 
  phi[c][r][g] will index the phi for pincell c, for region r in pincell c, 
  in energy group g. Same with q. 


* runMOC 
    |_ runRays
         |_ runRay 
              |_ getCell
              |_ findFirstIntersection
              |_ whichCircleIsRayIn
              |_ plotRaySegment
              |_ updateRay
              



